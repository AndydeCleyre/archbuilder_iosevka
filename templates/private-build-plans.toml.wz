@require(charvars, spacings, custom_weights, use_custom_weights, contextual_widths)
@#
@(
    contextual_widths = str(contextual_widths).lower()
)\
@for spacing in spacings:
@(
    if spacing == 'normal':
        plan = 'IosevkaCustom'
        family = 'Iosevka Custom'
    elif spacing == 'quasi-proportional':
        plan = 'IosevkaQpCustom'
        family = 'Iosevka QP Custom'
    elif spacing == 'quasi-proportional-extension-only':
        plan = 'IosevkaQpeCustom'
        family = 'Iosevka QPE Custom'
    elif spacing == 'fontconfig-mono':
        plan = 'IosevkaFcmCustom'
        family = 'Iosevka FCM Custom'
    else:
        plan = f"Iosevka{spacing.title()}Custom"
        family = f"Iosevka {spacing.title()} Custom"
)\
@#
[buildPlans.@{plan}]
family = "@family"
exportGlyphNames = false
buildTextureFeature = @contextual_widths
spacing = "@spacing"

[buildPlans.@{plan}.ligations]
inherits = "dlig"
# disables = []
# enables = []

# [buildPlans.@{plan}.variants]
# inherits = "ss16"

[buildPlans.@{plan}.variants.design]
@for char, style in charvars.items():
@char = "@style"
@end

# Override above variants for each slope:
# [buildPlans.@{plan}.variants.upright]
# [buildPlans.@{plan}.variants.italic]

@if use_custom_weights:
@for name, weight in custom_weights.items():
[buildPlans.@{plan}.weights.@{name}]
shape = @weight['override']
menu = @weight['default']
css = @weight['default']

@end
@end
[buildPlans.@{plan}.slopes.Upright]
angle = 0
shape = "upright"
menu  = "upright"
css   = "normal"

# [buildPlans.@{plan}.slopes.Oblique]
# angle = 9.4
# shape = "oblique"
# menu  = "oblique"
# css   = "oblique"

[buildPlans.@{plan}.slopes.Italic]
angle = 9.4
shape = "italic"
menu  = "italic"
css   = "italic"

@end
